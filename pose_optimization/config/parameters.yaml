ee2hand:
  translation: [0.0, -0.026, 0.07]  # x, y, z in meters
  rotation: [3.14, 0, -1.57]  # Roll, Pitch, Yaw in radians

world2camera:
  translation: [-0.1,-0.45,0.09]  # x, y, z in meters
  rotation: [-1.57,0.0,-1.57]  # Roll, Pitch, Yaw in radians

operational:
    method: "NLopt"  # Method to use for optimization, e.g., "SVD", "Levenberg-Marquardt"

    print_error_before_loop: false  # Print error before optimization loop
    print_error_in_loop: false  # Print error after optimization loop
    print_error_after_loop: true  # Print error after optimization loop
    print_joint_angles: false  # Print joint angles during optimization

    baseline_hz: 20  # Baseline frequency for optimization
NLopt:
  algorithm: "LN_COBYLA"  # Optimization algorithm to use, e.g., "LD_LBFGS", "LN_COBYLA"
  max_iterations: 200  # Maximum iterations for NLopt
  tolerance: 1e-4  # Tolerance for convergence
  pos_weight: 10.0  # Weight for position error in cost function
  rot_weight: 1.0  # Weight for rotation error in cost function
  joint_weights: [1, 1, 1, 1, 0.0, 0.0, 0.0]  # Weights for joint angles
  joint_penalty_weight: 1.0  # Penalty weight for joint angles
  acceleration_weight: 1.0  # Weight for acceleration in cost function
  velocity_weight: 1.0  # Weight for velocity in cost function

SVD:
  max_iterations: 100  # Maximum iterations for SVD
  convergence_threshold: 1e-2  # Threshold for convergence
  damping_factor: 0.1  # Damping factor for optimization
  print_jacobian: false  # Print Jacobian matrix during optimization

initial_joint_states: [-1.8662461835704307, 0.8590559575694462, -0.6697032662556018, 0.21030423026992587, 0.0, 0.0, 0.0]
# initial_joint_states: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  # Initial joint states for the arm
  